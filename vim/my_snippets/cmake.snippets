snippet new "new project" !b
cmake_minimum_required (VERSION 3.9 FATAL_ERROR)
project (${1:`!v expand("%:p:h:t")`} VERSION 0.0 LANGUAGES CXX)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror -Wdeprecated")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ftemplate-backtrace-limit=0")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-absolute-paths")

add_executable($1
  main.cpp
)
endsnippet

snippet lib "add a library" !b
add_library(${1:lib}
  $1.hpp$0
  $1.cpp$0
)
endsnippet
snippet test "Add tests to the project" !b
add_executable(test_${1:app}
  test_main.cpp
  vendor/catch.hpp
)

set(CATCH_URL "https://raw.githubusercontent.com/philsquared/Catch/master/single_include/catch.hpp")
add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/vendor/catch.hpp
  COMMAND mkdir -p ${CMAKE_CURRENT_SOURCE_DIR}/vendor && curl ${CATCH_URL} > ${CMAKE_CURRENT_SOURCE_DIR}/vendor/catch.hpp
)
endsnippet

snippet if "conditional" !b
if($1)
  $2
endif()
endsnippet

snippet set "set variable" !b
set($1 $2)
endsnippet
snippet gl "bring in everything needed for opengl" !b
include(FindPkgConfig)

<<<<<<< HEAD
=======
#sdl
#PKG_SEARCH_MODULE(SDL2 REQUIRED sdl2)
#PKG_SEARCH_MODULE(SDL2_image REQUIRED SDL2_image)
#INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIRS} ${SDL2_image_INCLUDE_DIRS} )
#TARGET_LINK_LIBRARIES(${1:projectname} ${SDL2_LIBRARIES} ${SDL2_image_LIBRARIES})

>>>>>>> Update some cmake snippets
#gl
find_package(OpenGL REQUIRED)
include_directories(${OPENGL_INCLUDE_DIRS})
target_link_libraries(cgame ${OPENGL_LIBRARIES})

#glm
include(cmake/FindGLM.cmake)
include_directories(${glm_include_dir})

#glfw
find_package(glfw3 3.2 REQUIRED)
target_link_libraries($1 glfw)

#glad
# go to http://glad.dav1d.de/ and generate the src
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glad/include)
target_link_libraries(${1:projectname} dl)
# TODO: add ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glad/src/glad.c to executable
endsnippet

snippet lua "include lua" !b
#NOTE: include "lua.hpp", not "lua.h" or <lua/lua.hpp>
find_package(Lua 5.3 REQUIRED)
target_link_libraries(${1:projectname} ${LUA_LIBRARIES})
include_directories(${LUA_INCLUDE_DIR})
endsnippet
snippet swig "add swig module" !b
find_package(SWIG REQUIRED)
include(${SWIG_USE_FILE})
# swig will need to include project headers:
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_SWIG_FLAGS -c++ -nomoduleglobal)
set_property(SOURCE ${1:interface}.i PROPERTY CPLUSPLUS ON)
  swig_add_library(
      $1
      LANGUAGE lua
      SOURCES $1.i
      TYPE STATIC
    )
target_link_libraries(${2:projectname} $1)
endsnippet
snippet sdl "SDL2 libs" !b
#sdl
find_package(SDL2 REQUIRED)
target_link_libraries(${1:app} ${SDL2_LIBRARIES})
include_directories(${SDL2_INCLUDE_DIRS})
endsnippet
snippet sqlite "sqlite" !b
target_link_libraries($1 sqlite3)
endsnippet
