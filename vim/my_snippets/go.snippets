snippet if "conditional" !b
if ${VISUAL}${1} {
  ${2:}
}$3
endsnippet
snippet for "loop" !b
for ${VISUAL}${1} {
  ${2:}
}$3
endsnippet
snippet times "do n times" !b
for ${2:i} := 0; $2 < $1; $2++ {
  $0
}
endsnippet
snippet e "fatal error" !b
if err != nil {
  return fmt.Errorf("${1:failure}: %v", err)
}$0
endsnippet
snippet err "panic if err" !b
if err != nil {
  panic(err)
}$0
endsnippet
snippet panic "panic with an error" !b
panic(fmt.Errorf("$1"))
endsnippet
snippet fn "function" !w
func$1($2)$3{
  $4
}$0
endsnippet
snippet lm "anonymous function" !b
func($1){
  $2
}$0
endsnippet
snippet m "Method" !b
func (${3:`!p
snip.rv=''.join([c.lower() for i, c in enumerate(t[2]) if i == 0 or c.isupper()])
`} *${2:`!v
  get(matchlist(getline(search('^type\s\+\(\w*\)', 'bWn')), '\s*type\s*\(\w*\)'), 1, '')
`}) ${1:foo}($4)$5{
  ${VISUAL}${0}
}
endsnippet
snippet meth "old method" !b
m$0
endsnippet
snippet ctor "constructor function" !b
func New${2:$1}($3) *${1:`!v
  get(matchlist(getline(search('\s*type\s*\(\w*\)', 'bWn')), '\s*type\s*\(\w*\)'), 1, '')
`} {
  return &$1{
    $4
  }
}
endsnippet
snippet impl "Statically ensure implementation" !b
//$2 implements $1
var _ ${1} = (*${2:`!v
get(matchlist(getline(search('\s*type\s*\(\w*\)', 'bWn')), '\s*type\s*\(\w*\)'), 1, '')
`})(nil)
endsnippet
snippet log "log stuff" !b
log.Println("$1")
endsnippet
snippet l "log variables" !b
log.Printf("$1: ${1/[^\,]+/%#v/g}", ${1})
endsnippet
snippet jslog "log using console" !b
js.Global.Get("console").Call("log", "$1", $1)
endsnippet
snippet go "inline goroutine" !b
go func(){
  ${0:${VISUAL}}
}()
endsnippet
snippet defer "inline defer func" !b
defer func(){
  $0
}()
endsnippet
snippet recover "Description" !b
defer func(){
  if err := recover(); err != nil {
    $0
  }
}()
endsnippet
snippet append "quick append" !b
$1 = append($1, $0)
endsnippet
snippet http "quick http handler" !b
http.HandleFunc("/$1", func(res http.ResponseWriter, req *http.Request) {
  fmt.Fprintln(res, "hello")
})
$0
endsnippet
snippet listen "http listen and serve" !b
log.Println("Listening on port ${1:3000}")
log.Fatal(http.ListenAndServe(":$1", ${2:nil}))
endsnippet
snippet main "main function" !b
func main(){
  $1
}
endsnippet

snippet postgrest "run postgrest" !b
cmd := exec.Command(
    "postgrest", "postgres://$1:$1@localhost:5432/$1",
    "--port", "4000",
    "--anonymous", "$1", //todo: create anonymous role
    //"--schema", "public", //todo: create api schema
    //"--jwt-secret", (default "secret") //todo: create jwt secret
    //"--pool", "200",
    //"--max-rows", (default unlimited)
  )
  cmd.Stdout = os.Stdout
  cmd.Stderr = os.Stderr
  err := cmd.Start()

  if err != nil {
    log.Fatalf("unhandled error: %#v\n", err)
  }

  u, err := url.Parse("http://localhost:4000")
  if err != nil {
    log.Fatal(err)
  }
  proxy := httputil.NewSingleHostReverseProxy(u)
  http.Handle("/data/", http.StripPrefix("/data", proxy))
endsnippet
snippet te "error in test" !b
if err != nil {
  t.Fatalf("$1: %v\n", err)
}$0
endsnippet
snippet tne "equality in test" !b
if $1 != $2 {
  t.Fatalf(\`$1 != $2, $1 == "%v"\`, $1)
}
endsnippet
snippet tde "test deep equal" !b
if !reflect.DeepEqual($1, $2) {
  log.Printf("$1:%v\n", $1)
  log.Printf("$2:%v\n", $2)
  t.Fatalf("values not deep equal")
}
endsnippet
snippet tl "test log values" !b
t.Errorf("$1: ${1/[^\,]+/%#v/g}", ${1})
endsnippet
snippet tlog "test log message" !b
t.Errorf("$1")
endsnippet
snippet jsonlog "log out some json" !b
if b, err := json.MarshalIndent($1, "  ", "  "); err != nil {
  return fmt.Errorf("couldn't format json: %v", err)
} else {
  log.Printf("string(b: %s", string(b))
}
endsnippet
snippet jsonbody "get json from a response body" !b
var ${2:body} interface{}
dec := json.NewDecoder($1.Body)
err = dec.Decode(&body)
if err != nil {
  return fmt.Errorf("couldn't decode result json: %v", err)
}
endsnippet
snippet mysql "mysql table with the standard stuff in it" !b
CREATE TABLE ${1:foo} (
    id          BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    customer_id TEXT,
    user_id     TEXT
    PRIMARY KEY (id)
) ENGINE=InnoDB CHARSET=utf8 COLLATE=utf8_bin;
endsnippet
