snippet todo
//TODO: $1
endsnippet

snippet test "spin up some mocha tests" !b
let assert = require('assert');

describe('something', function(){
  it('should be something', function(){
    assert.equal(1,2);
  });
});
endsnippet
snippet log "console.log something" !b
console.log("$1");
endsnippet

snippet l "console.log something" !b
console.log("${VISUAL}$1:", ${VISUAL}${2:$1});
endsnippet
snippet la "Log arguments" !b
console.log("arguments:", arguments);
endsnippet

snippet ca "console.assert" !b
console.assert(${VISUAL}$1, "${VISUAL}$1");
endsnippet
snippet timeout "set a timeout" !b
setTimeout(()=>{
  ${2:${VISUAL}}
}, ${1:0});
endsnippet
snippet interval "set an interval" !b
setInterval(()=>{
  $2
}, ${1:0});
endsnippet
snippet fn "Make a function" !w
function$1($2){
  ${VISUAL}$3
}
endsnippet
snippet lm "lambda" !w
($1)=>{
  $2
}
endsnippet
snippet then "common lambda" !w
then(($1)=>{
  $2
})$0
endsnippet
snippet catch "common lambda" !w
catch(($1)=>{
  $2
})$0
endsnippet
snippet map "common lambda" !w
map(($1)=>{
  $2
})$0
endsnippet
snippet forEach "common lambda" !w
forEach(($1)=>{
  $2
});
endsnippet
snippet scope "JS scope function trick" !w
(function($1){
  $2
})(${1/\$/jQuery/g});
endsnippet

snippet if "typical conditional" !b
if ($1){
  ${VISUAL}$2
}
endsnippet

snippet ifi "conditional with visual in conditional" !b
if (${VISUAL}$1){
  $2
}$0
endsnippet

snippet while "typical while" !b
while ($1){
  ${VISUAL}$2
}$0
endsnippet

snippet whilei "while with visual in conditional" !b
while (${VISUAL}$1){
  $2
}$0
endsnippet

snippet for "for loop" !b
for ($1){
  ${VISUAL}$2
}$0
endsnippet
snippet afor "for loop over array" !b
for (let ${2:i}=0; $2<${1:array}.length; $2++){
  let ${3:element} = $1[$2];
  ${VISUAL}$5
}$0
endsnippet

snippet forin "for in loop" !b
for (let ${1:item} in ${2:obj}){
  ${VISUAL}$3
}$0
endsnippet

snippet forini "for in loop, visual in obj" !b
for (let ${1:item} in ${2:${VISUAL}}){
  $3
}$0
endsnippet

snippet forinown "for in loop with ownProperty guard" !b
for (let ${1:item} in ${2:obj}) if $2.hasOwnProperty($1){
  ${VISUAL}$3
}$0
endsnippet
snippet mapkv "Map the keys and values of an object" !b
Object.keys($1).map((${2:key})=>{
  let ${3:val} = $1[$2];
  $4
})$0
endsnippet

snippet do "do-while loop" !b
do {
  ${VISUAL}$2
} while (${1:true});$0
endsnippet

snippet doi "do-while loop, visual in condition" !b
do {
  $1
} while (${VISUAL});$0
endsnippet

snippet def "requirejs define" !b
define(function(require){
  $0
});
endsnippet

snippet req "requirejs require" !b
require(function(require){
  $0
});
endsnippet

snippet r "common-js style require" !b
var ${1:foo} = require('$2${3:$1}');
$0
endsnippet

snippet ngf "angular factory" b
angular.module('$1').factory('$2', [$3function(${3/"|(,\s*$)//g}){
  let $2 = {};
  $0
  return $2;
}]);
endsnippet

snippet ngf "angular filter" b
angular.module('$1').filter('$2', [$3function(${3/"|(,\s*$)//g}){
  return function($4){
    $0
  };
}]);
endsnippet

snippet ngs "angular service" !b
angular.module('$1').service('$2', [$3function(${3/"|(,\s*$)//g}){
  this.${4:method} = function($5){
    $6
  };
}]);
endsnippet

snippet ngc "angular controller" !b
angular.module('$1').controller('$2', [${3:"$scope", }function(${3/"|(,\s*$)//g}){
  $0
}]);
endsnippet

snippet ngd "angular directive" !b
angular.module('$1').directive('$2', [$3function(${3/"|(,\s*$)//g}){
  return {
    priority: ${4:0},
    template: '${5:<div></div>}',
    templateUrl: '${6:}',
    replace: ${7:false},
    transclude: ${8:false},
    restrict: '${9:AECM}',
    scope: ${10:false},
    compile: function(elem, attr, transclude){
      $11
    },
    link: function($scope, elem, attrs){
      $12
    }
  };
}]);
endsnippet
snippet ctor "prototype-style constructor" !b
function ${1:`!v expand('%:t:r')`}($2){${2/\s*([^,\s]+),?/\n  this._$1 = $1;/g}$4
}
$0
endsnippet

snippet meth "prototype-style method" !b
${1:`!v
  get(matchlist(getline(search('\s*function\s*\([A-Z]\w*\)', 'bWn')), '\s*function\s*\([A-Z]\w*\)'), 1, '')
`}.prototype.${2:method} = function($3){
  $4
};
$0
endsnippet

snippet it "it" !b
it('$1', function(){
  $0
});
endsnippet

snippet describe "describe" !b
describe('$1', function(){
  $0
});
endsnippet

snippet /* "cool block comment" !b
/***`!p res = '*'*max(map(lambda str: len(str), t[1].split("\n")))`***\
|   ${1}   |
\***`!p res = '*'*max(map(lambda str: len(str), t[1].split("\n")))`***/
endsnippet

snippet ael "Add Event Listener"  !i
addEventListener('$1', (${2:event}) => {
  ${3:console.log('$1 event happened:', event);}
});
endsnippet
snippet rel "Remove event listener" !i
removeEventListener('$1', ${2:handler});
endsnippet
snippet webpack "a good starting point for webpack" !b
//webpack.config.js
module.exports = {
  entry: [
    //'babel-polyfill',
    './main'
  ],
  output: {
    path: "./build",
    filename: "bundle.js"
  },
  module:{
    "loaders (babel)": [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        //todo: npm install webpack babel-{loader,core,polyfill} babel-preset-{es2015,stage-0} --save
        loader: 'babel-loader',
        query:{
          presets: ['es2015', 'stage-0']
        }
      },
    ],
    "loaders (typescript)": [
      {
        test: /\.ts$/,
        loader: 'ts-loader',
        exclude: /node_modules/
      }
    ],
    "loaders (css)": [
      {
        test: /\.css$/,
        //todo: npm install {style,css}-loader --save
        loader: "style-loader!css-loader?modules&localIdentName=[name]_[local]_[hash:base64:5]"
        //loader: "style-loader!css-loader?modules&localIdentName=[name]_[local]_[hash:base64:5]!postcss-loader"
        //todo: use the extract text plugin to bring css in as a separate file
        //loader: ExtractTextPlugin.extract(
        //  "style-loader",
        //  "css-loader?modules&localIdentName=[name]_[local]_[hash:base64:5]!postcss-loader"
        //)
      }
    ]
  },
  plugins: [
    //new webpack.ProvidePlugin({
      //assert: 'src/assert'
    //})
  ],
  devtool: "inline-source-map",
  resolve:{
    extensions: ['','.webpack.js','.ts','.js']
  },
  //cache: true,
  devServer:{
    proxy: {
      "/api" : {
        target: "http://localhost:3000/",
      },
      "/api" : {
        target: "http://localhost:3000/",
        pathRewrite: {
          '^/api' : ''
        }
      }
    }
  }
};
endsnippet
snippet j "el function element" !w
el('${1:div}', {$2}, [$3])$0
endsnippet
snippet J "el function element" !w
el(${1:div}, {$2}, [$3])$0
endsnippet
snippet el "el function element" !w
el('${1:div}', {$2}, [$3])$0
endsnippet
snippet El "el function element" !w
el(${1:this}, {$2}, [$3])$0
endsnippet
snippet m "mithril element" !w
el('${1:div}', {$2}, [$3])$0
endsnippet
snippet elf "Generate a baseline el function" !b
function el(elem, attrs, children){
  if (typeof elem == 'string'){
    elem = document.createElement(elem)
  }

  for (let name in attrs){
    if (name == "style" && typeof attrs.style == 'object'){
      for (style in attrs.style){
        elem.style[style] = attrs.style[style]
      }
    } else {
      elem[name] = attrs[name]
    }
  }

  while (elem.firstChild) {
    elem.removeChild(elem.firstChild)
  }

  const addChild = (child)=> {
    if (typeof child == 'string'){
      elem.appendChild(document.createTextNode(child))
    } else if (typeof child == 'number'){
      elem.appendChild(document.createTextNode(""+child))
    } else if (Array.isArray(child)) {
      child.map(addChild)
    } else {
      elem.appendChild(child)
    }
  }

  children.map(addChild);

  return elem
}
endsnippet
snippet import "import" !b
import ${1:foo} from '${2:./$1}'
endsnippet
snippet raf "requestAnimationFrame" !b
!(function frame(){
  ${0:${VISUAL}}
  requestAnimationFrame(frame);
})();
endsnippet
snippet edc "export default class" !b
export default class ${1:`!v expand('%:t:r')`}{
  constructor(){
    $0
  }
}
endsnippet
