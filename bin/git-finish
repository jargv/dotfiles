#!/bin/bash

# Script to merge worktree branch and clean up worktree
# Usage: git finish (when inside a worktree)

set -e

# Check if we're in the worktrees directory or one of its descendants
CURRENT_PATH=$(pwd)
if [[ ! "$CURRENT_PATH" =~ ^$HOME/projects/worktrees/ ]]; then
    echo "Error: This command must be run from within a worktree directory"
    echo "Current path: $CURRENT_PATH"
    echo "Expected to be in: $HOME/projects/worktrees/"
    exit 1
fi

# Get the current worktree path
WORKTREE_PATH=$(pwd)
echo "Current worktree: $WORKTREE_PATH"

# Get the current branch name
CURRENT_BRANCH=$(git branch --show-current)
echo "Current branch: $CURRENT_BRANCH"

# Check for uncommitted changes in worktree and auto-commit if needed
AUTO_COMMIT_HASH=""
if ! git diff-index --quiet HEAD --; then
    echo "Found uncommitted changes in worktree. Auto-committing..."
    
    # Convert branch name to commit message (underscores to spaces)
    COMMIT_MESSAGE="${CURRENT_BRANCH//_/ }"
    
    # Add all changes and commit
    git add -A
    git commit -m "$COMMIT_MESSAGE"
    AUTO_COMMIT_HASH=$(git rev-parse HEAD)
    echo "Auto-committed changes with hash: $AUTO_COMMIT_HASH"
elif [ -n "$(git ls-files --others --exclude-standard)" ]; then
    echo "Found untracked files in worktree. Auto-committing..."
    
    # Convert branch name to commit message (underscores to spaces)
    COMMIT_MESSAGE="${CURRENT_BRANCH//_/ }"
    
    # Add all changes and commit
    git add -A
    git commit -m "$COMMIT_MESSAGE"
    AUTO_COMMIT_HASH=$(git rev-parse HEAD)
    echo "Auto-committed untracked files with hash: $AUTO_COMMIT_HASH"
else
    echo "No uncommitted changes in worktree"
fi

# Find the source repository (common worktree root)
SOURCE_REPO=$(git worktree list | head -1 | awk '{print $1}')
echo "Source repository: $SOURCE_REPO"

# Change to source repository
echo "Changing to source repository..."
cd "$SOURCE_REPO"

# Check if source repo has uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo "Error: Source repository has uncommitted changes. Please commit or stash them first."
    git status --porcelain
    exit 1
fi

# Check if there are untracked files
if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    echo "Warning: Source repository has untracked files:"
    git ls-files --others --exclude-standard
    echo ""
fi

# Switch to main branch (or master if main doesn't exist)
MAIN_BRANCH="main"
if ! git show-ref --verify --quiet refs/heads/main; then
    MAIN_BRANCH="master"
fi

echo "Switching to $MAIN_BRANCH branch..."
git checkout "$MAIN_BRANCH"

# Pull latest changes
echo "Pulling latest changes..."
git pull

# Check if the branch can be merged cleanly (fast-forward or clean rebase)
echo "Verifying that $CURRENT_BRANCH can be integrated cleanly..."

# Check if this would be a fast-forward merge
MERGE_BASE=$(git merge-base "$MAIN_BRANCH" "$CURRENT_BRANCH")
MAIN_HEAD=$(git rev-parse "$MAIN_BRANCH")

if [ "$MERGE_BASE" = "$MAIN_HEAD" ]; then
    echo "✓ Fast-forward merge possible - no merge conflicts expected"
    INTEGRATION_METHOD="fast-forward"
else
    echo "Checking for potential rebase conflicts..."

    # Perform a dry-run rebase to check for conflicts
    if git rebase --onto "$MAIN_BRANCH" "$MERGE_BASE" "$CURRENT_BRANCH" --dry-run 2>/dev/null; then
        echo "✓ Clean rebase possible - no merge conflicts expected"
        INTEGRATION_METHOD="rebase"
    else
        # Try a more thorough check using merge-tree
        if git merge-tree "$MERGE_BASE" "$MAIN_BRANCH" "$CURRENT_BRANCH" | grep -q '<<<<<<<'; then
            echo "✗ Error: Merge conflicts detected!"
            echo "The following conflicts would occur:"
            git merge-tree "$MERGE_BASE" "$MAIN_BRANCH" "$CURRENT_BRANCH" | grep -A5 -B5 '<<<<<<<'
            echo ""
            echo "Please resolve conflicts manually in the worktree first, then try again."
            exit 1
        else
            echo "✓ Clean rebase should be possible"
            INTEGRATION_METHOD="rebase"
        fi
    fi
fi

# Function to rollback auto-commit if needed
rollback_auto_commit() {
    if [ -n "$AUTO_COMMIT_HASH" ]; then
        echo "Rolling back auto-commit due to merge failure..."
        cd "$WORKTREE_PATH"
        git reset --hard HEAD~1
        echo "Auto-commit $AUTO_COMMIT_HASH has been rolled back"
    fi
}

# Integrate the branch based on the determined method
echo "Attempting to integrate branch..."
INTEGRATION_SUCCESS=false

if [ "$INTEGRATION_METHOD" = "fast-forward" ]; then
    echo "Performing fast-forward merge of $CURRENT_BRANCH onto $MAIN_BRANCH"
    if git merge --ff-only "$CURRENT_BRANCH"; then
        INTEGRATION_SUCCESS=true
    else
        echo "Error: Fast-forward merge failed"
        rollback_auto_commit
        exit 1
    fi
else
    echo "Rebasing branch: $CURRENT_BRANCH onto $MAIN_BRANCH"
    if git rebase "$CURRENT_BRANCH"; then
        INTEGRATION_SUCCESS=true
    else
        echo "Error: Rebase failed"
        rollback_auto_commit
        exit 1
    fi
fi

if [ "$INTEGRATION_SUCCESS" = true ]; then
    echo "✓ Branch integration successful"
else
    echo "✗ Branch integration failed"
    rollback_auto_commit
    exit 1
fi

# Remove the worktree
echo "Removing worktree: $WORKTREE_PATH"
git worktree remove "$WORKTREE_PATH"

# Get the commit hash before deleting the branch
BRANCH_HASH=$(git rev-parse "$CURRENT_BRANCH")

# Delete the branch
echo "Deleting branch: $CURRENT_BRANCH"
git branch -d "$CURRENT_BRANCH"
echo "Deleted branch hash: $BRANCH_HASH"

# Copy the worktree path to clipboard
echo -n "$SOURCE_REPO" | clip
echo "Source repo path copied to clipboard!"
