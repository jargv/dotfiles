snippet new "new project" !b
cmake_minimum_required (VERSION 3.12 FATAL_ERROR)
project (${1:`!v expand("%:p:h:t")`} VERSION 0.0 LANGUAGES CXX C)

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

set(CMAKE_CXX_STANDARD 20)

# executable
add_executable($1
  main.cpp
)

target_compile_options($1
PRIVATE
  -Wall -Wextra -Wuninitialized -Werror
  -Wno-unused-parameter -Wno-unused-function -Wno-unused-variable
  -ftemplate-backtrace-limit=0
)
endsnippet

snippet lib "add a library" !b
add_library(${1:lib}
  $1.hpp$0
  $1.cpp$0
)
endsnippet
snippet test "Add catch2 tests to the project" !b
# Test
add_executable(test
  test_main.cpp
)

Include(FetchContent)

FetchContent_Declare(
  Catch2
  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
  GIT_TAG        v3.0.0-preview5
)

FetchContent_MakeAvailable(Catch2)

target_link_libraries(test PRIVATE Catch2::Catch2WithMain)
endsnippet

snippet if "conditional" !b
if($1)
  $2
endif()
endsnippet

snippet set "set variable" !b
set($1 $2)
endsnippet
snippet gl "bring in everything needed for opengl" !b
include(FindPkgConfig)

#sdl
#PKG_SEARCH_MODULE(SDL2 REQUIRED sdl2)
#PKG_SEARCH_MODULE(SDL2_image REQUIRED SDL2_image)
#INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIRS} ${SDL2_image_INCLUDE_DIRS} )
#TARGET_LINK_LIBRARIES($1 ${SDL2_LIBRARIES} ${SDL2_image_LIBRARIES})

#gl
find_package(OpenGL REQUIRED)
include_directories(${OPENGL_INCLUDE_DIRS})
target_link_libraries($1 ${OPENGL_LIBRARIES})

#glm
include(cmake/FindGLM.cmake)
include_directories(${glm_include_dir})

#glfw
find_package(glfw3 3.2 REQUIRED)
target_link_libraries($1 glfw)

#glad
# go to http://glad.dav1d.de/ and generate the src
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glad/include)
target_link_libraries(${1:projectname} dl)
# TODO: add to executable: ${CMAKE_CURRENT_SOURCE_DIR}/vendor/glad/src/glad.c
endsnippet


snippet lua "include lua" !b
#NOTE: include "lua.hpp", not "lua.h" or <lua/lua.hpp>
find_package(Lua 5.3 REQUIRED)
target_link_libraries(${1:projectname} ${LUA_LIBRARIES})
include_directories(${LUA_INCLUDE_DIR})
endsnippet
snippet swig "add swig module" !b
find_package(SWIG REQUIRED)
include(${SWIG_USE_FILE})
# swig will need to include project headers:
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_SWIG_FLAGS -c++ -nomoduleglobal)
set_property(SOURCE ${1:interface}.i PROPERTY CPLUSPLUS ON)
  swig_add_library(
      $1
      LANGUAGE lua
      SOURCES $1.i
      TYPE STATIC
    )
target_link_libraries(${2:projectname} $1)
endsnippet
snippet sdl "SDL2 libs" !b
#sdl
find_package(SDL2 REQUIRED)
target_link_libraries(${1:app} ${SDL2_LIBRARIES})
target_include_directories($1 SYSTEM PRIVATE ${SDL2_INCLUDE_DIRS})
endsnippet
snippet sqlite "sqlite" !b
find_package(SQLite3 REQUIRED)
if(SQLITE3_FOUND AND NOT SQLITE3_LIBRARIES)
  set(SQLITE3_LIBRARIES sqlite3)
endif()
target_include_directories(learnsqlite PRIVATE ${SQLITE3_INCLUDE_DIRS})
target_link_libraries (learnsqlite ${SQLITE3_LIBRARIES})
endsnippet
snippet freetype "Description" !b
#freetype
include(FindFreetype)
if(NOT FREETYPE_FOUND)
  message( FATAL_ERROR "couldn't find freetype")
endif()
target_include_directories($1 PRIVATE ${FREETYPE_INCLUDE_DIRS})
target_link_libraries($1 PRIVATE ${FREETYPE_LIBRARIES})
endsnippet

snippet ccache "Description" !b
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
  set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
else()
  message(FATAL_ERROR "wanna use ccache")
endif()
endsnippet
snippet l "log a variable" !b
  message("$1: \${${1}}")
endsnippet
