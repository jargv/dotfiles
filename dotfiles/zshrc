#export TERM=screen-256color
export TERM=xterm-256color
#export TERM=screen-it

if [[ -f ~/.zshlocal ]]; then
  source ~/.zshlocal
fi

#nvm {{{1
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

#arduino {{{1
ARDUINO_PATH=~/bin/arduino-1.8.5/
#windows (wsl) {{{1
if [[ -d "/mnt/c" ]]; then
  export DISPLAY=:0
fi
#setup nix {{{1
# export NIX_PATH="~/.nix-defexpr/nixpgks"
# export nixpkgs="~/.nix-defexpr/nixpgks"
if [[ -f ~/.nix-profile/etc/profile.d/nix.sh ]]; then
  . ~/.nix-profile/etc/profile.d/nix.sh
fi

#path {{{1
export EDITOR="vim"
export PATH=$PATH:~/.cabal/bin
export PATH=$PATH:~/config/bin
export PATH=$PATH:~/bin
export PATH=/usr/local/bin:$PATH
export PATH=/usr/local/sbin:$PATH
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
export PATH=~/.npm-global/bin/:$PATH
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
#linuxbrew paths {{{2
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
export MANPATH="/home/linuxbrew/.linuxbrew/share/man:$MANPATH"
export INFOPATH="/home/linuxbrew/share/info:$INFOPATH"
#go paths {{{2
#export GOPATH=~/projects/go
export GOPATH=~/projects/go
export PATH=$PATH:~/projects/go/bin
#}}}
#rust paths {{{2
export PATH=~/.cargo/bin:$PATH
export RUST_SRC_PATH=$( [[ -x $(which rustc) ]] && echo "$(rustc --print sysroot)/lib/rustlib/src/rust/src");
#}}}

#Attach tmux session {{{1
# Attempt to discover a detached session and attach
# it, else create a new session
if [[ "$TERM" != "screen" ]] &&
   [[ -z "$TMUX" ]] &&
   [[ "$SSH_CONNECTION" == "" ]]; then
  mainsession="x"
  if tmux has-session -t $mainsession 2>/dev/null; then
    tmux -2 attach-session -t $mainsession
  else
    tmux -2 new-session -s $mainsession
  fi
fi

#antigen {{{1
# antigenfile=~/config/antigen/antigen.zsh
# if [[ ! -f "$antigenfile" ]]; then
#   git clone "https://github.com/zsh-users/antigen.git" ~/config/antigen
# fi

# source $antigenfile

# #antigen bundle man
# antigen bundle zsh-users/zsh-syntax-highlighting

# antigen bundle autojump
# antigen bundle git
# antigen bundle postgres
# antigen bundle go
# antigen bundle tmux
# antigen apply

#autojump {{{1
if [[ $(uname) == "Linux" ]]; then
  [[ -f /usr/share/autojump/autojump.zsh ]] && . /usr/share/autojump/autojump.zsh
else
  #[[ -s $(brew --prefix)/etc/autojump.sh ]] && . $(brew --prefix)/etc/autojump.sh
fi

#{{{1 history
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory inc_append_history share_history hist_ignore_dups
setopt histignorespace

#vim {{{1
bindkey -v
#don't stop the backspace at the insert point {{{2
bindkey "^?" backward-delete-char

#hit escape twice to go into normal mode in embedded terminal {{{2
# double_escape() {
#   if [[ ! -z "$VIM_SERVERNAME" ]]; then
#      command vim --servername $VIM_SERVERNAME --remote-send "<C-\><C-N>"
#   fi
# }

# zle -N double_escape

# bindkey -M vicmd  double_escape

#trying to invoke vim in embeded term opens in place {{{2
# vim() {
#   if [[ -z "$VIM_SERVERNAME" ]]; then
#     command vim "$@"
#   else
#     command vim --servername $VIM_SERVERNAME --remote "$@"
#   fi
# }

#remove all the keymaps that make esc slow {{{2
export KEYTIMEOUT=1
KEYTIMEOUT=1

#}}}

#{{{1 clang
export CC=clang
export CXX=clang++

#{{{1 keybindings
#bindkey  push-line-or-edit
#bindkey -M vicmd  push-line-or-edit

#{{{2 tmux/unified keybindings
  #{{{3 movement
  # tmux-widget-up(){ tmux select-pan -U }
  # tmux-widget-down(){ tmux select-pan -D }
  # tmux-widget-left(){ tmux select-pan -L }
  # tmux-widget-right(){ tmux select-pan -R }
  # zle -N tmux-widget-up
  # zle -N tmux-widget-down
  # zle -N tmux-widget-left
  # zle -N tmux-widget-right
  # bindkey -M vicmd ' k' tmux-widget-up
  # bindkey -M vicmd ' j' tmux-widget-down
  # bindkey -M vicmd ' l' tmux-widget-right
  # bindkey -M vicmd ' h' tmux-widget-left

  #{{{3 close window
  # widget-exit(){ exit }
  # zle -N widget-exit
  # bindkey -M vicmd ' q' widget-exit
  #}}}
#}}}

#fzf {{{1
FZF_TMUX=1
fzf_keybindings=~/config/vim/bundle/fzf/shell/key-bindings.zsh
fzf_completion=~/config/vim/bundle/fzf/shell/completion.zsh
[ -f $fzf_keybindings ] && source $fzf_keybindings
[ -f $fzf_completion ] && source $fzf_completion
export FZF_DEFAULT_COMMAND='
(git ls-tree -r --name-only HEAD ||
  find . -path "*/\.*" -prune -o -type f -print -o -type l -print |
sed s/^..//) 2> /dev/null'

#{{{1 completion
autoload -Uz compinit
compinit

#{{{1 Aliases
#{{{2 commands that always use sudo
alias pacman="sudo pacman"
alias apt-get="sudo apt-get"
#{{{2 vim command alias
#none
#{{{2 git prompt aliases
if [ -z "$GIT_PROMPT" ]; then
  GIT_PROMPT=0
fi
alias yesgit='GIT_PROMPT=1 exec zsh'
alias nogit='GIT_PROMPT=0 exec zsh'

#{{{2color aliases
#todo: make this work on mac and linux
#alias ls='ls --color=auto'
alias ls='ls -G'
autoload -U colors && colors

#{{{2 ls aliases
alias ll='ls -l'
alias la='ls -a'
alias lla='ls -la'
#{{{2 suffix aliases
alias -s txt='vim'
alias -s sh=sh
alias -s pdf=chrome
#}}}
#{{{2 docker aliases
alias dm docker-machine
alias dc docker-compose
alias d docker
#}}}


#{{{1 Command-changing vars
export LESS=-RXF
local ack_types="--type-set handlebars=.handlebars"
local ack_ignore_dirs="--ignore-dir node_modules --ignore-dir components --ignore-dir javascripts-built"
export ACK_OPTIONS="--pager=less $ack_ignore_dirs $ack_types"
export MAKEFLAGS="-j4"

#{{{1 auto ls every time I cd
function chpwd() {
  emulate -LR zsh
  #ls -F --color=auto
  ls -F -G
}

#{{{1 Prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1
setopt transient_rprompt
setopt PROMPT_SUBST

#colors
local blue_op="%{$fg_bold[blue]%}"
local blue_cp="%{$reset_color%}"
local red_op="%{$fg[red]%}"
local red_cp="%{$reset_color%}"
local green_op="%{$fg[green]%}"
local green_cp="%{$reset_color%}"

#parts
local path_p="${blue_op}%~${blue_cp}"
local time="${blue_op}%D{%L:%M}${blue_cp}"
local date="${blue_op}%w${blue_cp}"
local smiley="%(?,%{$fg[green]%}:%)%{$reset_color%},%{$fg[red]%}:(%{$reset_color%})"
local njobs="${green_op}%j${green_cp}"
local hist="${blue_op}%h${blue_cp}"
local host="${blue_op}%M${blue_cp}"
local vim=""
local cur_cmd="${blue_op}%_${blue_cp}"

#vi mode
VIMODE='[i]'
function zle-keymap-select {
  VIMODE="${${KEYMAP/vicmd/[n]}/(main|viins)/[i]}"
  zle reset-prompt
}
zle -N zle-keymap-select

if [[ -n $VIMRUNTIME ]]; then
  if [[ -z $VIM_DEPTH ]]; then
    export VIM_DEPTH=0
    local vim_depth_string=""
  else
    export VIM_DEPTH=$(( $VIM_DEPTH + 1 ))
    local vim_depth_string="-$VIM_DEPTH"
  fi
  #vim="${red_op}|VIM$vim_depth_string|${red_cp}"
fi

local secondLine=$terminfo[cud1]$terminfo[cuu1]$terminfo[sc]$terminfo[cud1]
local atRight='${host}'
local line1='${vim}[${njobs}]${path_p}[${vim}${smiley}]$red_op%#$red_cp '
local line2="\$([ "$GIT_PROMPT" = "1" ] && git status -sb 2>/dev/null)"
preexec () { print -rn -- $terminfo[ed]; }

PROMPT="%{$secondLine$line2$terminfo[rc]%}${line1}"
RPROMPT="$atRight"
PROMPT2="${cur_cmd}> "

#{{{1 Other options
setopt CORRECT
setopt extendedglob
setopt autocd
setopt cdable_vars
setopt pushd_ignore_dups
setopt no_clobber hist_allow_clobber
setopt csh_null_glob
unsetopt beep
zstyle :compinstall filename '~/.zshrc'

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

if [ -f /Users/j/projects/src/www.domo.com/tug/kubernetes-functions.sh ]; then
  source /Users/j/projects/src/www.domo.com/tug/kubernetes-functions.sh
fi
