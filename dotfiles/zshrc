export TERM=screen-256color

if [[ -f ~/.zshlocal ]]; then
  source ~/.zshlocal
fi

#windows (wsl) {{{1
if [[ -d "/mnt/c" ]]; then
  export DISPLAY=:0
fi


#Attach tmux session {{{1
# Attempt to discover a detached session and attach
# it, else create a new session
# if [[ "$TERM" != "screen" ]] &&
#    [[ -z "$TMUX" ]] &&
#    [[ "$SSH_CONNECTION" == "" ]]; then
#   mainsession="x"
#   if tmux has-session -t $mainsession 2>/dev/null; then
#     tmux -2 attach-session -t $mainsession
#   else
#     tmux -2 new-session -s $mainsession
#   fi
# fi

#autojump {{{1
if [[ $(uname) == "Linux" ]]; then
  [[ -f /usr/share/autojump/autojump.zsh ]] && . /usr/share/autojump/autojump.zsh
else
  [[ -s $(brew --prefix)/etc/autojump.sh ]] && . $(brew --prefix)/etc/autojump.sh
fi

#{{{1 history
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory inc_append_history share_history hist_ignore_dups
setopt histignorespace

#vim {{{1
alias vim='nvr --nostart -c ":set number"'
alias vimdiff='nvim -d'
bindkey -v
#don't stop the backspace at the insert point
bindkey "^?" backward-delete-char

#remove all the keymaps that make esc slow {{{2
export KEYTIMEOUT=1
KEYTIMEOUT=1

#}}}

#{{{1 clang
export CC=clang
export CXX=clang++

#{{{1 keybindings
#bindkey  push-line-or-edit
#bindkey -M vicmd  push-line-or-edit

#{{{2 tmux/unified keybindings
  #{{{3 movement
  # tmux-widget-up(){ tmux select-pan -U }
  # tmux-widget-down(){ tmux select-pan -D }
  # tmux-widget-left(){ tmux select-pan -L }
  # tmux-widget-right(){ tmux select-pan -R }
  # zle -N tmux-widget-up
  # zle -N tmux-widget-down
  # zle -N tmux-widget-left
  # zle -N tmux-widget-right
  # bindkey -M vicmd ' k' tmux-widget-up
  # bindkey -M vicmd ' j' tmux-widget-down
  # bindkey -M vicmd ' l' tmux-widget-right
  # bindkey -M vicmd ' h' tmux-widget-left

  #{{{3 close window
  # widget-exit(){ exit }
  # zle -N widget-exit
  # bindkey -M vicmd ' q' widget-exit
  #}}}
#}}}


#{{{1 completion
autoload -Uz compinit
compinit


#{{{2 git prompt aliases
if [ -z "$GIT_PROMPT" ]; then
  GIT_PROMPT=0
fi
alias yesgit='GIT_PROMPT=1 exec zsh'
alias nogit='GIT_PROMPT=0 exec zsh'

#{{{2color aliases
#todo: make this work on mac and linux
#alias ls='ls --color=auto'
alias ls='ls -G'
autoload -U colors && colors

#{{{2 ls aliases
alias ll='ls -l'
alias la='ls -a'
alias lla='ls -la'
#{{{2 suffix aliases
alias -s txt='nvim'
alias -s sh=sh
alias -s pdf=chrome
#}}}
#{{{2 docker aliases
alias dm docker-machine
alias dc docker-compose
alias d docker
#}}}


#{{{1 Command-changing vars
export LESS=-RXF
# local ack_types="--type-set handlebars=.handlebars"
# local ack_ignore_dirs="--ignore-dir node_modules --ignore-dir components --ignore-dir javascripts-built"
# export ACK_OPTIONS="--pager=less $ack_ignore_dirs $ack_types"
#export BROWSER=none
export TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S'


#{{{1 Prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1
setopt transient_rprompt
setopt PROMPT_SUBST

#colors
local blue_op="%{$fg_bold[blue]%}"
local blue_cp="%{$reset_color%}"
local red_op="%{$fg[red]%}"
local red_cp="%{$reset_color%}"
local green_op="%{$fg[green]%}"
local green_cp="%{$reset_color%}"

#parts
local path_p="${blue_op}%~${blue_cp}"
local time="${blue_op}%D{%L:%M}${blue_cp}"
local date="${blue_op}%w${blue_cp}"
local smiley="%(?,%{$fg[green]%}:%)%{$reset_color%},%{$fg[red]%}:(%{$reset_color%})"
local njobs="${green_op}%j${green_cp}"
local hist="${blue_op}%h${blue_cp}"
local host="${blue_op}%M${blue_cp}"
local vim=""
local cur_cmd="${blue_op}%_${blue_cp}"

#vi mode
VIMODE='[i]'
function zle-keymap-select {
  VIMODE="${${KEYMAP/vicmd/[n]}/(main|viins)/[i]}"
  zle reset-prompt
}
zle -N zle-keymap-select

if [[ -n $VIMRUNTIME ]]; then
  if [[ -z $VIM_DEPTH ]]; then
    export VIM_DEPTH=0
    local vim_depth_string=""
  else
    export VIM_DEPTH=$(( $VIM_DEPTH + 1 ))
    local vim_depth_string="-$VIM_DEPTH"
  fi
  #vim="${red_op}|VIM$vim_depth_string|${red_cp}"
fi

local secondLine=$terminfo[cud1]$terminfo[cuu1]$terminfo[sc]$terminfo[cud1]
local atRight='${host}'
local line1='${vim}[${njobs}]${path_p}[${vim}${smiley}]$red_op%#$red_cp '
local line2="\$([ "$GIT_PROMPT" = "1" ] && git status -sb 2>/dev/null)"
preexec () { print -rn -- $terminfo[ed]; }

PROMPT="%{$secondLine$line2$terminfo[rc]%}${line1}"
RPROMPT="$atRight"
PROMPT2="${cur_cmd}> "

#{{{1 Other options
setopt CORRECT
setopt extendedglob
setopt autocd
setopt cdable_vars
setopt pushd_ignore_dups
setopt no_clobber hist_allow_clobber
setopt csh_null_glob
unsetopt beep
#zstyle :compinstall filename '~/.zshrc'

# Java setup {{{1
# The output of running java_home or the directory containing bin/javac

#super useful function to kill any gradle lingering instances
kill_gradle() {
  kill -9 $(ps aux | grep gradle | grep -v grep | awk '{print $2}')
}
export kill_gradle=kill_gradle

#script-added setup {{{1

export AWS_SDK_LOAD_CONFIG=true

# hooks {{{1
function chpwd() {
  emulate -LR zsh
  #ls -F --color=auto
  #ls -F -G

  # signal the cd to nvim
  if [[ -n "$NVIM" && $(command -v nvr) ]]; then
    nvr -c "lua shell_hook('$PWD')"
  fi
}

function precmd() {
  # signal the command to nvim
  if [[ -n "$NVIM" && $(command -v nvr) ]]; then
    nvr -c "lua shell_hook()"
  fi
}
